# using HOODESolver
include("../test/henon_heiles.jl")
include("../src/preparephi.jl")
using Printf

function _printnumstr(num::BigFloat)
    str = @sprintf("%1.200e", num)
    println("parse(")
    println("    BigFloat,")
    println("    \"$(str[1:70])\" *")
    println("    \"$(str[71:140])\" *")
    println("    \"$(str[141:end])\"")
    print(") ")
end

function print_for_test(order, u0, tab_eps, n_tau, matrix_A::Matrix, fct::Function)
    prec = precision(BigFloat)
    setprecision(1024)
    println("# PrepareU0 order=$order n_tau =$n_tau")

    println("# tab_u0 i prepared data for each order from 2 to order")
    println(" u0=$u0")
    println("# this file is generated by gendataprep_u0.jl file")
    println("function get_prepare_u0_for_test()")
    size_eps = size(tab_eps, 1)
    println(
        "    tab_u0 = zeros(Complex{BigFloat}, $(size(u0,1)), $n_tau, $order, $size_eps)",
    )
    for i_eps = 1:size_eps
        epsilon = big(1) / big(2)^tab_eps[i_eps]
        par = PreparePhi(epsilon, n_tau, matrix_A, fct)
        for ord = 2:order
            pu0 = PrepareU0(par, ord, BigFloat.(u0), 4096)
            println("    tab_u0[ :, :, $ord, $i_eps] .= [")
            for i = 1:par.size_vect
                for i_ell = 1:n_tau
                    print("    ")
                    _printnumstr(real(pu0.ut0[i, i_ell]))
                end
                println("")
            end
            println("]")
        end
    end

    println("    tab_eps = [")
    for i_eps = 1:size_eps
        println("    $(big(1)/big(2)^tab_eps[i_eps]),")
    end
    println("]")

    println("    return tab_u0, tab_eps")
    println("end")

    setprecision(prec)
end

print_for_test(
    15,
    BigFloat.([0.125, 0.140625, 0.15625, 0.171875]),
    [8, 16, 32],
    32,
    [0 0 1 0; 0 0 0 0; -1 0 0 0; 0 0 0 0],
    henon_heiles,
)
